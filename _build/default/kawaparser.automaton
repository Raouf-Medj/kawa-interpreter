State 0:
## Known stack suffix:
##
## LR(1) items:
program' -> . program [ # ]
## Transitions:
-- On VAR shift to state 1
-- On var_decl shift to state 9
-- On program shift to state 11
-- On list(var_decl) shift to state 12
## Reductions:
-- On MAIN CLASS
--   reduce production list(var_decl) ->

State 1:
## Known stack suffix:
## VAR
## LR(1) items:
var_decl -> VAR . typp IDENT SEMI [ WHILE VAR TRUE THIS SUB RETURN PRINT NOT NEW MAIN LPAR INT IF IDENT FALSE END CLASS ]
## Transitions:
-- On TVOID shift to state 2
-- On TINT shift to state 3
-- On TBOOL shift to state 4
-- On IDENT shift to state 5
-- On typp shift to state 6
## Reductions:

State 2:
## Known stack suffix:
## TVOID
## LR(1) items:
typp -> TVOID . [ IDENT ]
## Transitions:
## Reductions:
-- On IDENT
--   reduce production typp -> TVOID

State 3:
## Known stack suffix:
## TINT
## LR(1) items:
typp -> TINT . [ IDENT ]
## Transitions:
## Reductions:
-- On IDENT
--   reduce production typp -> TINT

State 4:
## Known stack suffix:
## TBOOL
## LR(1) items:
typp -> TBOOL . [ IDENT ]
## Transitions:
## Reductions:
-- On IDENT
--   reduce production typp -> TBOOL

State 5:
## Known stack suffix:
## IDENT
## LR(1) items:
typp -> IDENT . [ IDENT ]
## Transitions:
## Reductions:
-- On IDENT
--   reduce production typp -> IDENT

State 6:
## Known stack suffix:
## VAR typp
## LR(1) items:
var_decl -> VAR typp . IDENT SEMI [ WHILE VAR TRUE THIS SUB RETURN PRINT NOT NEW MAIN LPAR INT IF IDENT FALSE END CLASS ]
## Transitions:
-- On IDENT shift to state 7
## Reductions:

State 7:
## Known stack suffix:
## VAR typp IDENT
## LR(1) items:
var_decl -> VAR typp IDENT . SEMI [ WHILE VAR TRUE THIS SUB RETURN PRINT NOT NEW MAIN LPAR INT IF IDENT FALSE END CLASS ]
## Transitions:
-- On SEMI shift to state 8
## Reductions:

State 8:
## Known stack suffix:
## VAR typp IDENT SEMI
## LR(1) items:
var_decl -> VAR typp IDENT SEMI . [ WHILE VAR TRUE THIS SUB RETURN PRINT NOT NEW MAIN LPAR INT IF IDENT FALSE END CLASS ]
## Transitions:
## Reductions:
-- On WHILE VAR TRUE THIS SUB RETURN PRINT NOT NEW MAIN LPAR INT IF IDENT FALSE END CLASS
--   reduce production var_decl -> VAR typp IDENT SEMI

State 9:
## Known stack suffix:
## var_decl
## LR(1) items:
list(var_decl) -> var_decl . list(var_decl) [ WHILE TRUE THIS SUB RETURN PRINT NOT NEW MAIN LPAR INT IF IDENT FALSE END CLASS ]
## Transitions:
-- On VAR shift to state 1
-- On var_decl shift to state 9
-- On list(var_decl) shift to state 10
## Reductions:
-- On WHILE TRUE THIS SUB RETURN PRINT NOT NEW MAIN LPAR INT IF IDENT FALSE END CLASS
--   reduce production list(var_decl) ->

State 10:
## Known stack suffix:
## var_decl list(var_decl)
## LR(1) items:
list(var_decl) -> var_decl list(var_decl) . [ WHILE TRUE THIS SUB RETURN PRINT NOT NEW MAIN LPAR INT IF IDENT FALSE END CLASS ]
## Transitions:
## Reductions:
-- On WHILE TRUE THIS SUB RETURN PRINT NOT NEW MAIN LPAR INT IF IDENT FALSE END CLASS
--   reduce production list(var_decl) -> var_decl list(var_decl)

State 11:
## Known stack suffix:
## program
## LR(1) items:
program' -> program . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept program

State 12:
## Known stack suffix:
## list(var_decl)
## LR(1) items:
program -> list(var_decl) . list(class_def) MAIN BEGIN list(instruction) END EOF [ # ]
## Transitions:
-- On CLASS shift to state 13
-- On list(class_def) shift to state 121
-- On class_def shift to state 127
## Reductions:
-- On MAIN
--   reduce production list(class_def) ->

State 13:
## Known stack suffix:
## CLASS
## LR(1) items:
class_def -> CLASS . IDENT opt_parent BEGIN list(attr_decl) list(method_def) END [ MAIN CLASS ]
## Transitions:
-- On IDENT shift to state 14
## Reductions:

State 14:
## Known stack suffix:
## CLASS IDENT
## LR(1) items:
class_def -> CLASS IDENT . opt_parent BEGIN list(attr_decl) list(method_def) END [ MAIN CLASS ]
## Transitions:
-- On EXTENDS shift to state 15
-- On opt_parent shift to state 17
## Reductions:
-- On BEGIN
--   reduce production opt_parent ->

State 15:
## Known stack suffix:
## EXTENDS
## LR(1) items:
opt_parent -> EXTENDS . IDENT [ BEGIN ]
## Transitions:
-- On IDENT shift to state 16
## Reductions:

State 16:
## Known stack suffix:
## EXTENDS IDENT
## LR(1) items:
opt_parent -> EXTENDS IDENT . [ BEGIN ]
## Transitions:
## Reductions:
-- On BEGIN
--   reduce production opt_parent -> EXTENDS IDENT

State 17:
## Known stack suffix:
## CLASS IDENT opt_parent
## LR(1) items:
class_def -> CLASS IDENT opt_parent . BEGIN list(attr_decl) list(method_def) END [ MAIN CLASS ]
## Transitions:
-- On BEGIN shift to state 18
## Reductions:

State 18:
## Known stack suffix:
## CLASS IDENT opt_parent BEGIN
## LR(1) items:
class_def -> CLASS IDENT opt_parent BEGIN . list(attr_decl) list(method_def) END [ MAIN CLASS ]
## Transitions:
-- On ATTR shift to state 19
-- On list(attr_decl) shift to state 23
-- On attr_decl shift to state 119
## Reductions:
-- On METHOD END
--   reduce production list(attr_decl) ->

State 19:
## Known stack suffix:
## ATTR
## LR(1) items:
attr_decl -> ATTR . typp IDENT SEMI [ METHOD END ATTR ]
## Transitions:
-- On TVOID shift to state 2
-- On TINT shift to state 3
-- On TBOOL shift to state 4
-- On IDENT shift to state 5
-- On typp shift to state 20
## Reductions:

State 20:
## Known stack suffix:
## ATTR typp
## LR(1) items:
attr_decl -> ATTR typp . IDENT SEMI [ METHOD END ATTR ]
## Transitions:
-- On IDENT shift to state 21
## Reductions:

State 21:
## Known stack suffix:
## ATTR typp IDENT
## LR(1) items:
attr_decl -> ATTR typp IDENT . SEMI [ METHOD END ATTR ]
## Transitions:
-- On SEMI shift to state 22
## Reductions:

State 22:
## Known stack suffix:
## ATTR typp IDENT SEMI
## LR(1) items:
attr_decl -> ATTR typp IDENT SEMI . [ METHOD END ATTR ]
## Transitions:
## Reductions:
-- On METHOD END ATTR
--   reduce production attr_decl -> ATTR typp IDENT SEMI

State 23:
## Known stack suffix:
## CLASS IDENT opt_parent BEGIN list(attr_decl)
## LR(1) items:
class_def -> CLASS IDENT opt_parent BEGIN list(attr_decl) . list(method_def) END [ MAIN CLASS ]
## Transitions:
-- On METHOD shift to state 24
-- On method_def shift to state 115
-- On list(method_def) shift to state 117
## Reductions:
-- On END
--   reduce production list(method_def) ->

State 24:
## Known stack suffix:
## METHOD
## LR(1) items:
method_def -> METHOD . typp IDENT LPAR loption(separated_nonempty_list(COMMA,param_decl)) RPAR BEGIN list(var_decl) list(instruction) END [ METHOD END ]
## Transitions:
-- On TVOID shift to state 2
-- On TINT shift to state 3
-- On TBOOL shift to state 4
-- On IDENT shift to state 5
-- On typp shift to state 25
## Reductions:

State 25:
## Known stack suffix:
## METHOD typp
## LR(1) items:
method_def -> METHOD typp . IDENT LPAR loption(separated_nonempty_list(COMMA,param_decl)) RPAR BEGIN list(var_decl) list(instruction) END [ METHOD END ]
## Transitions:
-- On IDENT shift to state 26
## Reductions:

State 26:
## Known stack suffix:
## METHOD typp IDENT
## LR(1) items:
method_def -> METHOD typp IDENT . LPAR loption(separated_nonempty_list(COMMA,param_decl)) RPAR BEGIN list(var_decl) list(instruction) END [ METHOD END ]
## Transitions:
-- On LPAR shift to state 27
## Reductions:

State 27:
## Known stack suffix:
## METHOD typp IDENT LPAR
## LR(1) items:
method_def -> METHOD typp IDENT LPAR . loption(separated_nonempty_list(COMMA,param_decl)) RPAR BEGIN list(var_decl) list(instruction) END [ METHOD END ]
## Transitions:
-- On TVOID shift to state 2
-- On TINT shift to state 3
-- On TBOOL shift to state 4
-- On IDENT shift to state 5
-- On typp shift to state 28
-- On separated_nonempty_list(COMMA,param_decl) shift to state 30
-- On param_decl shift to state 31
-- On loption(separated_nonempty_list(COMMA,param_decl)) shift to state 34
## Reductions:
-- On RPAR
--   reduce production loption(separated_nonempty_list(COMMA,param_decl)) ->

State 28:
## Known stack suffix:
## typp
## LR(1) items:
param_decl -> typp . IDENT [ RPAR COMMA ]
## Transitions:
-- On IDENT shift to state 29
## Reductions:

State 29:
## Known stack suffix:
## typp IDENT
## LR(1) items:
param_decl -> typp IDENT . [ RPAR COMMA ]
## Transitions:
## Reductions:
-- On RPAR COMMA
--   reduce production param_decl -> typp IDENT

State 30:
## Known stack suffix:
## separated_nonempty_list(COMMA,param_decl)
## LR(1) items:
loption(separated_nonempty_list(COMMA,param_decl)) -> separated_nonempty_list(COMMA,param_decl) . [ RPAR ]
## Transitions:
## Reductions:
-- On RPAR
--   reduce production loption(separated_nonempty_list(COMMA,param_decl)) -> separated_nonempty_list(COMMA,param_decl)

State 31:
## Known stack suffix:
## param_decl
## LR(1) items:
separated_nonempty_list(COMMA,param_decl) -> param_decl . [ RPAR ]
separated_nonempty_list(COMMA,param_decl) -> param_decl . COMMA separated_nonempty_list(COMMA,param_decl) [ RPAR ]
## Transitions:
-- On COMMA shift to state 32
## Reductions:
-- On RPAR
--   reduce production separated_nonempty_list(COMMA,param_decl) -> param_decl

State 32:
## Known stack suffix:
## param_decl COMMA
## LR(1) items:
separated_nonempty_list(COMMA,param_decl) -> param_decl COMMA . separated_nonempty_list(COMMA,param_decl) [ RPAR ]
## Transitions:
-- On TVOID shift to state 2
-- On TINT shift to state 3
-- On TBOOL shift to state 4
-- On IDENT shift to state 5
-- On typp shift to state 28
-- On separated_nonempty_list(COMMA,param_decl) shift to state 33
-- On param_decl shift to state 31
## Reductions:

State 33:
## Known stack suffix:
## param_decl COMMA separated_nonempty_list(COMMA,param_decl)
## LR(1) items:
separated_nonempty_list(COMMA,param_decl) -> param_decl COMMA separated_nonempty_list(COMMA,param_decl) . [ RPAR ]
## Transitions:
## Reductions:
-- On RPAR
--   reduce production separated_nonempty_list(COMMA,param_decl) -> param_decl COMMA separated_nonempty_list(COMMA,param_decl)

State 34:
## Known stack suffix:
## METHOD typp IDENT LPAR loption(separated_nonempty_list(COMMA,param_decl))
## LR(1) items:
method_def -> METHOD typp IDENT LPAR loption(separated_nonempty_list(COMMA,param_decl)) . RPAR BEGIN list(var_decl) list(instruction) END [ METHOD END ]
## Transitions:
-- On RPAR shift to state 35
## Reductions:

State 35:
## Known stack suffix:
## METHOD typp IDENT LPAR loption(separated_nonempty_list(COMMA,param_decl)) RPAR
## LR(1) items:
method_def -> METHOD typp IDENT LPAR loption(separated_nonempty_list(COMMA,param_decl)) RPAR . BEGIN list(var_decl) list(instruction) END [ METHOD END ]
## Transitions:
-- On BEGIN shift to state 36
## Reductions:

State 36:
## Known stack suffix:
## METHOD typp IDENT LPAR loption(separated_nonempty_list(COMMA,param_decl)) RPAR BEGIN
## LR(1) items:
method_def -> METHOD typp IDENT LPAR loption(separated_nonempty_list(COMMA,param_decl)) RPAR BEGIN . list(var_decl) list(instruction) END [ METHOD END ]
## Transitions:
-- On VAR shift to state 1
-- On var_decl shift to state 9
-- On list(var_decl) shift to state 37
## Reductions:
-- On WHILE TRUE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT FALSE END
--   reduce production list(var_decl) ->

State 37:
## Known stack suffix:
## METHOD typp IDENT LPAR loption(separated_nonempty_list(COMMA,param_decl)) RPAR BEGIN list(var_decl)
## LR(1) items:
method_def -> METHOD typp IDENT LPAR loption(separated_nonempty_list(COMMA,param_decl)) RPAR BEGIN list(var_decl) . list(instruction) END [ METHOD END ]
## Transitions:
-- On WHILE shift to state 38
-- On TRUE shift to state 40
-- On THIS shift to state 41
-- On SUB shift to state 42
-- On RETURN shift to state 84
-- On PRINT shift to state 87
-- On NOT shift to state 43
-- On NEW shift to state 44
-- On LPAR shift to state 47
-- On INT shift to state 48
-- On IF shift to state 92
-- On IDENT shift to state 49
-- On FALSE shift to state 50
-- On uop shift to state 51
-- On mem shift to state 97
-- On list(instruction) shift to state 113
-- On instruction shift to state 107
-- On expression shift to state 109
## Reductions:
-- On END
--   reduce production list(instruction) ->

State 38:
## Known stack suffix:
## WHILE
## LR(1) items:
instruction -> WHILE . LPAR expression RPAR BEGIN list(instruction) END [ WHILE TRUE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT FALSE END ]
## Transitions:
-- On LPAR shift to state 39
## Reductions:

State 39:
## Known stack suffix:
## WHILE LPAR
## LR(1) items:
instruction -> WHILE LPAR . expression RPAR BEGIN list(instruction) END [ WHILE TRUE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT FALSE END ]
## Transitions:
-- On TRUE shift to state 40
-- On THIS shift to state 41
-- On SUB shift to state 42
-- On NOT shift to state 43
-- On NEW shift to state 44
-- On LPAR shift to state 47
-- On INT shift to state 48
-- On IDENT shift to state 49
-- On FALSE shift to state 50
-- On uop shift to state 51
-- On mem shift to state 52
-- On expression shift to state 81
## Reductions:

State 40:
## Known stack suffix:
## TRUE
## LR(1) items:
expression -> TRUE . [ TRUE THIS SUB SEMI RPAR REM OR NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE FALSE EQ DOT DIV AND ADD ]
## Transitions:
## Reductions:
-- On TRUE THIS SUB SEMI RPAR REM OR NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE FALSE EQ DOT DIV AND ADD
--   reduce production expression -> TRUE

State 41:
## Known stack suffix:
## THIS
## LR(1) items:
expression -> THIS . [ TRUE THIS SUB SEMI RPAR REM OR NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE FALSE EQ DOT DIV AND ADD ]
## Transitions:
## Reductions:
-- On TRUE THIS SUB SEMI RPAR REM OR NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE FALSE EQ DOT DIV AND ADD
--   reduce production expression -> THIS

State 42:
## Known stack suffix:
## SUB
## LR(1) items:
uop -> SUB . [ TRUE THIS SUB NOT NEW LPAR INT IDENT FALSE ]
## Transitions:
## Reductions:
-- On TRUE THIS SUB NOT NEW LPAR INT IDENT FALSE
--   reduce production uop -> SUB

State 43:
## Known stack suffix:
## NOT
## LR(1) items:
uop -> NOT . [ TRUE THIS SUB NOT NEW LPAR INT IDENT FALSE ]
## Transitions:
## Reductions:
-- On TRUE THIS SUB NOT NEW LPAR INT IDENT FALSE
--   reduce production uop -> NOT

State 44:
## Known stack suffix:
## NEW
## LR(1) items:
expression -> NEW . IDENT [ TRUE THIS SUB SEMI RPAR REM OR NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE FALSE EQ DOT DIV AND ADD ]
expression -> NEW . IDENT LPAR list(expression) RPAR [ TRUE THIS SUB SEMI RPAR REM OR NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE FALSE EQ DOT DIV AND ADD ]
## Transitions:
-- On IDENT shift to state 45
## Reductions:

State 45:
## Known stack suffix:
## NEW IDENT
## LR(1) items:
expression -> NEW IDENT . [ TRUE THIS SUB SEMI RPAR REM OR NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE FALSE EQ DOT DIV AND ADD ]
expression -> NEW IDENT . LPAR list(expression) RPAR [ TRUE THIS SUB SEMI RPAR REM OR NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE FALSE EQ DOT DIV AND ADD ]
## Transitions:
-- On LPAR shift to state 46
## Reductions:
-- On TRUE THIS SUB SEMI RPAR REM OR NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE FALSE EQ DOT DIV AND ADD
--   reduce production expression -> NEW IDENT
** Conflict on LPAR

State 46:
## Known stack suffix:
## NEW IDENT LPAR
## LR(1) items:
expression -> NEW IDENT LPAR . list(expression) RPAR [ TRUE THIS SUB SEMI RPAR REM OR NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE FALSE EQ DOT DIV AND ADD ]
## Transitions:
-- On TRUE shift to state 40
-- On THIS shift to state 41
-- On SUB shift to state 42
-- On NOT shift to state 43
-- On NEW shift to state 44
-- On LPAR shift to state 47
-- On INT shift to state 48
-- On IDENT shift to state 49
-- On FALSE shift to state 50
-- On uop shift to state 51
-- On mem shift to state 52
-- On list(expression) shift to state 79
-- On expression shift to state 69
## Reductions:
-- On RPAR
--   reduce production list(expression) ->

State 47:
## Known stack suffix:
## LPAR
## LR(1) items:
expression -> LPAR . expression RPAR [ TRUE THIS SUB SEMI RPAR REM OR NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE FALSE EQ DOT DIV AND ADD ]
## Transitions:
-- On TRUE shift to state 40
-- On THIS shift to state 41
-- On SUB shift to state 42
-- On NOT shift to state 43
-- On NEW shift to state 44
-- On LPAR shift to state 47
-- On INT shift to state 48
-- On IDENT shift to state 49
-- On FALSE shift to state 50
-- On uop shift to state 51
-- On mem shift to state 52
-- On expression shift to state 77
## Reductions:

State 48:
## Known stack suffix:
## INT
## LR(1) items:
expression -> INT . [ TRUE THIS SUB SEMI RPAR REM OR NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE FALSE EQ DOT DIV AND ADD ]
## Transitions:
## Reductions:
-- On TRUE THIS SUB SEMI RPAR REM OR NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE FALSE EQ DOT DIV AND ADD
--   reduce production expression -> INT

State 49:
## Known stack suffix:
## IDENT
## LR(1) items:
mem -> IDENT . [ TRUE THIS SUB SET SEMI RPAR REM OR NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE FALSE EQ DOT DIV AND ADD ]
## Transitions:
## Reductions:
-- On TRUE THIS SUB SET SEMI RPAR REM OR NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE FALSE EQ DOT DIV AND ADD
--   reduce production mem -> IDENT

State 50:
## Known stack suffix:
## FALSE
## LR(1) items:
expression -> FALSE . [ TRUE THIS SUB SEMI RPAR REM OR NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE FALSE EQ DOT DIV AND ADD ]
## Transitions:
## Reductions:
-- On TRUE THIS SUB SEMI RPAR REM OR NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE FALSE EQ DOT DIV AND ADD
--   reduce production expression -> FALSE

State 51:
## Known stack suffix:
## uop
## LR(1) items:
expression -> uop . expression [ TRUE THIS SUB SEMI RPAR REM OR NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE FALSE EQ DOT DIV AND ADD ]
## Transitions:
-- On TRUE shift to state 40
-- On THIS shift to state 41
-- On SUB shift to state 42
-- On NOT shift to state 43
-- On NEW shift to state 44
-- On LPAR shift to state 47
-- On INT shift to state 48
-- On IDENT shift to state 49
-- On FALSE shift to state 50
-- On uop shift to state 51
-- On mem shift to state 52
-- On expression shift to state 53
## Reductions:

State 52:
## Known stack suffix:
## mem
## LR(1) items:
expression -> mem . [ TRUE THIS SUB SEMI RPAR REM OR NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE FALSE EQ DOT DIV AND ADD ]
## Transitions:
## Reductions:
-- On TRUE THIS SUB SEMI RPAR REM OR NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE FALSE EQ DOT DIV AND ADD
--   reduce production expression -> mem

State 53:
## Known stack suffix:
## uop expression
## LR(1) items:
expression -> expression . bop expression [ TRUE THIS SUB SEMI RPAR REM OR NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE FALSE EQ DOT DIV AND ADD ]
expression -> uop expression . [ TRUE THIS SUB SEMI RPAR REM OR NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE FALSE EQ DOT DIV AND ADD ]
expression -> expression . DOT IDENT LPAR list(expression) RPAR [ TRUE THIS SUB SEMI RPAR REM OR NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE FALSE EQ DOT DIV AND ADD ]
mem -> expression . DOT IDENT [ TRUE THIS SUB SEMI RPAR REM OR NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE FALSE EQ DOT DIV AND ADD ]
## Transitions:
-- On SUB shift to state 54
-- On REM shift to state 55
-- On OR shift to state 56
-- On NEQ shift to state 57
-- On MUL shift to state 58
-- On LT shift to state 59
-- On LE shift to state 60
-- On GT shift to state 61
-- On GE shift to state 62
-- On EQ shift to state 63
-- On DOT shift to state 64
-- On DIV shift to state 71
-- On AND shift to state 72
-- On ADD shift to state 73
-- On bop shift to state 75
## Reductions:
-- On TRUE THIS SUB SEMI RPAR REM OR NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE FALSE EQ DOT DIV AND ADD
--   reduce production expression -> uop expression
** Conflict on SUB REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD

State 54:
## Known stack suffix:
## SUB
## LR(1) items:
bop -> SUB . [ TRUE THIS SUB NOT NEW LPAR INT IDENT FALSE ]
## Transitions:
## Reductions:
-- On TRUE THIS SUB NOT NEW LPAR INT IDENT FALSE
--   reduce production bop -> SUB

State 55:
## Known stack suffix:
## REM
## LR(1) items:
bop -> REM . [ TRUE THIS SUB NOT NEW LPAR INT IDENT FALSE ]
## Transitions:
## Reductions:
-- On TRUE THIS SUB NOT NEW LPAR INT IDENT FALSE
--   reduce production bop -> REM

State 56:
## Known stack suffix:
## OR
## LR(1) items:
bop -> OR . [ TRUE THIS SUB NOT NEW LPAR INT IDENT FALSE ]
## Transitions:
## Reductions:
-- On TRUE THIS SUB NOT NEW LPAR INT IDENT FALSE
--   reduce production bop -> OR

State 57:
## Known stack suffix:
## NEQ
## LR(1) items:
bop -> NEQ . [ TRUE THIS SUB NOT NEW LPAR INT IDENT FALSE ]
## Transitions:
## Reductions:
-- On TRUE THIS SUB NOT NEW LPAR INT IDENT FALSE
--   reduce production bop -> NEQ

State 58:
## Known stack suffix:
## MUL
## LR(1) items:
bop -> MUL . [ TRUE THIS SUB NOT NEW LPAR INT IDENT FALSE ]
## Transitions:
## Reductions:
-- On TRUE THIS SUB NOT NEW LPAR INT IDENT FALSE
--   reduce production bop -> MUL

State 59:
## Known stack suffix:
## LT
## LR(1) items:
bop -> LT . [ TRUE THIS SUB NOT NEW LPAR INT IDENT FALSE ]
## Transitions:
## Reductions:
-- On TRUE THIS SUB NOT NEW LPAR INT IDENT FALSE
--   reduce production bop -> LT

State 60:
## Known stack suffix:
## LE
## LR(1) items:
bop -> LE . [ TRUE THIS SUB NOT NEW LPAR INT IDENT FALSE ]
## Transitions:
## Reductions:
-- On TRUE THIS SUB NOT NEW LPAR INT IDENT FALSE
--   reduce production bop -> LE

State 61:
## Known stack suffix:
## GT
## LR(1) items:
bop -> GT . [ TRUE THIS SUB NOT NEW LPAR INT IDENT FALSE ]
## Transitions:
## Reductions:
-- On TRUE THIS SUB NOT NEW LPAR INT IDENT FALSE
--   reduce production bop -> GT

State 62:
## Known stack suffix:
## GE
## LR(1) items:
bop -> GE . [ TRUE THIS SUB NOT NEW LPAR INT IDENT FALSE ]
## Transitions:
## Reductions:
-- On TRUE THIS SUB NOT NEW LPAR INT IDENT FALSE
--   reduce production bop -> GE

State 63:
## Known stack suffix:
## EQ
## LR(1) items:
bop -> EQ . [ TRUE THIS SUB NOT NEW LPAR INT IDENT FALSE ]
## Transitions:
## Reductions:
-- On TRUE THIS SUB NOT NEW LPAR INT IDENT FALSE
--   reduce production bop -> EQ

State 64:
## Known stack suffix:
## expression DOT
## LR(1) items:
expression -> expression DOT . IDENT LPAR list(expression) RPAR [ TRUE THIS SUB SEMI RPAR REM OR NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE FALSE EQ DOT DIV AND ADD ]
mem -> expression DOT . IDENT [ TRUE THIS SUB SET SEMI RPAR REM OR NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE FALSE EQ DOT DIV AND ADD ]
## Transitions:
-- On IDENT shift to state 65
## Reductions:

State 65:
## Known stack suffix:
## expression DOT IDENT
## LR(1) items:
expression -> expression DOT IDENT . LPAR list(expression) RPAR [ TRUE THIS SUB SEMI RPAR REM OR NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE FALSE EQ DOT DIV AND ADD ]
mem -> expression DOT IDENT . [ TRUE THIS SUB SET SEMI RPAR REM OR NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE FALSE EQ DOT DIV AND ADD ]
## Transitions:
-- On LPAR shift to state 66
## Reductions:
-- On TRUE THIS SUB SET SEMI RPAR REM OR NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE FALSE EQ DOT DIV AND ADD
--   reduce production mem -> expression DOT IDENT
** Conflict on LPAR

State 66:
## Known stack suffix:
## expression DOT IDENT LPAR
## LR(1) items:
expression -> expression DOT IDENT LPAR . list(expression) RPAR [ TRUE THIS SUB SEMI RPAR REM OR NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE FALSE EQ DOT DIV AND ADD ]
## Transitions:
-- On TRUE shift to state 40
-- On THIS shift to state 41
-- On SUB shift to state 42
-- On NOT shift to state 43
-- On NEW shift to state 44
-- On LPAR shift to state 47
-- On INT shift to state 48
-- On IDENT shift to state 49
-- On FALSE shift to state 50
-- On uop shift to state 51
-- On mem shift to state 52
-- On list(expression) shift to state 67
-- On expression shift to state 69
## Reductions:
-- On RPAR
--   reduce production list(expression) ->

State 67:
## Known stack suffix:
## expression DOT IDENT LPAR list(expression)
## LR(1) items:
expression -> expression DOT IDENT LPAR list(expression) . RPAR [ TRUE THIS SUB SEMI RPAR REM OR NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE FALSE EQ DOT DIV AND ADD ]
## Transitions:
-- On RPAR shift to state 68
## Reductions:

State 68:
## Known stack suffix:
## expression DOT IDENT LPAR list(expression) RPAR
## LR(1) items:
expression -> expression DOT IDENT LPAR list(expression) RPAR . [ TRUE THIS SUB SEMI RPAR REM OR NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE FALSE EQ DOT DIV AND ADD ]
## Transitions:
## Reductions:
-- On TRUE THIS SUB SEMI RPAR REM OR NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE FALSE EQ DOT DIV AND ADD
--   reduce production expression -> expression DOT IDENT LPAR list(expression) RPAR

State 69:
## Known stack suffix:
## expression
## LR(1) items:
expression -> expression . bop expression [ TRUE THIS SUB RPAR REM OR NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE FALSE EQ DOT DIV AND ADD ]
expression -> expression . DOT IDENT LPAR list(expression) RPAR [ TRUE THIS SUB RPAR REM OR NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE FALSE EQ DOT DIV AND ADD ]
list(expression) -> expression . list(expression) [ RPAR ]
mem -> expression . DOT IDENT [ TRUE THIS SUB RPAR REM OR NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE FALSE EQ DOT DIV AND ADD ]
## Transitions:
-- On TRUE shift to state 40
-- On THIS shift to state 41
-- On SUB shift to state 70
-- On REM shift to state 55
-- On OR shift to state 56
-- On NOT shift to state 43
-- On NEW shift to state 44
-- On NEQ shift to state 57
-- On MUL shift to state 58
-- On LT shift to state 59
-- On LPAR shift to state 47
-- On LE shift to state 60
-- On INT shift to state 48
-- On IDENT shift to state 49
-- On GT shift to state 61
-- On GE shift to state 62
-- On FALSE shift to state 50
-- On EQ shift to state 63
-- On DOT shift to state 64
-- On DIV shift to state 71
-- On AND shift to state 72
-- On ADD shift to state 73
-- On uop shift to state 51
-- On mem shift to state 52
-- On list(expression) shift to state 74
-- On expression shift to state 69
-- On bop shift to state 75
## Reductions:
-- On RPAR
--   reduce production list(expression) ->

State 70:
## Known stack suffix:
## SUB
## LR(1) items:
bop -> SUB . [ TRUE THIS SUB NOT NEW LPAR INT IDENT FALSE ]
uop -> SUB . [ TRUE THIS SUB NOT NEW LPAR INT IDENT FALSE ]
## Transitions:
## Reductions:
-- On TRUE THIS SUB NOT NEW LPAR INT IDENT FALSE
--   reduce production bop -> SUB
-- On TRUE THIS SUB NOT NEW LPAR INT IDENT FALSE
--   reduce production uop -> SUB
** Conflict on TRUE THIS SUB NOT NEW LPAR INT IDENT FALSE

State 71:
## Known stack suffix:
## DIV
## LR(1) items:
bop -> DIV . [ TRUE THIS SUB NOT NEW LPAR INT IDENT FALSE ]
## Transitions:
## Reductions:
-- On TRUE THIS SUB NOT NEW LPAR INT IDENT FALSE
--   reduce production bop -> DIV

State 72:
## Known stack suffix:
## AND
## LR(1) items:
bop -> AND . [ TRUE THIS SUB NOT NEW LPAR INT IDENT FALSE ]
## Transitions:
## Reductions:
-- On TRUE THIS SUB NOT NEW LPAR INT IDENT FALSE
--   reduce production bop -> AND

State 73:
## Known stack suffix:
## ADD
## LR(1) items:
bop -> ADD . [ TRUE THIS SUB NOT NEW LPAR INT IDENT FALSE ]
## Transitions:
## Reductions:
-- On TRUE THIS SUB NOT NEW LPAR INT IDENT FALSE
--   reduce production bop -> ADD

State 74:
## Known stack suffix:
## expression list(expression)
## LR(1) items:
list(expression) -> expression list(expression) . [ RPAR ]
## Transitions:
## Reductions:
-- On RPAR
--   reduce production list(expression) -> expression list(expression)

State 75:
## Known stack suffix:
## expression bop
## LR(1) items:
expression -> expression bop . expression [ TRUE THIS SUB SEMI RPAR REM OR NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE FALSE EQ DOT DIV AND ADD ]
## Transitions:
-- On TRUE shift to state 40
-- On THIS shift to state 41
-- On SUB shift to state 42
-- On NOT shift to state 43
-- On NEW shift to state 44
-- On LPAR shift to state 47
-- On INT shift to state 48
-- On IDENT shift to state 49
-- On FALSE shift to state 50
-- On uop shift to state 51
-- On mem shift to state 52
-- On expression shift to state 76
## Reductions:

State 76:
## Known stack suffix:
## expression bop expression
## LR(1) items:
expression -> expression . bop expression [ TRUE THIS SUB SEMI RPAR REM OR NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE FALSE EQ DOT DIV AND ADD ]
expression -> expression bop expression . [ TRUE THIS SUB SEMI RPAR REM OR NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE FALSE EQ DOT DIV AND ADD ]
expression -> expression . DOT IDENT LPAR list(expression) RPAR [ TRUE THIS SUB SEMI RPAR REM OR NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE FALSE EQ DOT DIV AND ADD ]
mem -> expression . DOT IDENT [ TRUE THIS SUB SEMI RPAR REM OR NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE FALSE EQ DOT DIV AND ADD ]
## Transitions:
-- On SUB shift to state 54
-- On REM shift to state 55
-- On OR shift to state 56
-- On NEQ shift to state 57
-- On MUL shift to state 58
-- On LT shift to state 59
-- On LE shift to state 60
-- On GT shift to state 61
-- On GE shift to state 62
-- On EQ shift to state 63
-- On DOT shift to state 64
-- On DIV shift to state 71
-- On AND shift to state 72
-- On ADD shift to state 73
-- On bop shift to state 75
## Reductions:
-- On TRUE THIS SUB SEMI RPAR REM OR NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE FALSE EQ DOT DIV AND ADD
--   reduce production expression -> expression bop expression
** Conflict on SUB REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD

State 77:
## Known stack suffix:
## LPAR expression
## LR(1) items:
expression -> expression . bop expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> LPAR expression . RPAR [ TRUE THIS SUB SEMI RPAR REM OR NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE FALSE EQ DOT DIV AND ADD ]
expression -> expression . DOT IDENT LPAR list(expression) RPAR [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
mem -> expression . DOT IDENT [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
-- On SUB shift to state 54
-- On RPAR shift to state 78
-- On REM shift to state 55
-- On OR shift to state 56
-- On NEQ shift to state 57
-- On MUL shift to state 58
-- On LT shift to state 59
-- On LE shift to state 60
-- On GT shift to state 61
-- On GE shift to state 62
-- On EQ shift to state 63
-- On DOT shift to state 64
-- On DIV shift to state 71
-- On AND shift to state 72
-- On ADD shift to state 73
-- On bop shift to state 75
## Reductions:

State 78:
## Known stack suffix:
## LPAR expression RPAR
## LR(1) items:
expression -> LPAR expression RPAR . [ TRUE THIS SUB SEMI RPAR REM OR NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE FALSE EQ DOT DIV AND ADD ]
## Transitions:
## Reductions:
-- On TRUE THIS SUB SEMI RPAR REM OR NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE FALSE EQ DOT DIV AND ADD
--   reduce production expression -> LPAR expression RPAR

State 79:
## Known stack suffix:
## NEW IDENT LPAR list(expression)
## LR(1) items:
expression -> NEW IDENT LPAR list(expression) . RPAR [ TRUE THIS SUB SEMI RPAR REM OR NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE FALSE EQ DOT DIV AND ADD ]
## Transitions:
-- On RPAR shift to state 80
## Reductions:

State 80:
## Known stack suffix:
## NEW IDENT LPAR list(expression) RPAR
## LR(1) items:
expression -> NEW IDENT LPAR list(expression) RPAR . [ TRUE THIS SUB SEMI RPAR REM OR NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE FALSE EQ DOT DIV AND ADD ]
## Transitions:
## Reductions:
-- On TRUE THIS SUB SEMI RPAR REM OR NOT NEW NEQ MUL LT LPAR LE INT IDENT GT GE FALSE EQ DOT DIV AND ADD
--   reduce production expression -> NEW IDENT LPAR list(expression) RPAR

State 81:
## Known stack suffix:
## WHILE LPAR expression
## LR(1) items:
expression -> expression . bop expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . DOT IDENT LPAR list(expression) RPAR [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
instruction -> WHILE LPAR expression . RPAR BEGIN list(instruction) END [ WHILE TRUE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT FALSE END ]
mem -> expression . DOT IDENT [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
-- On SUB shift to state 54
-- On RPAR shift to state 82
-- On REM shift to state 55
-- On OR shift to state 56
-- On NEQ shift to state 57
-- On MUL shift to state 58
-- On LT shift to state 59
-- On LE shift to state 60
-- On GT shift to state 61
-- On GE shift to state 62
-- On EQ shift to state 63
-- On DOT shift to state 64
-- On DIV shift to state 71
-- On AND shift to state 72
-- On ADD shift to state 73
-- On bop shift to state 75
## Reductions:

State 82:
## Known stack suffix:
## WHILE LPAR expression RPAR
## LR(1) items:
instruction -> WHILE LPAR expression RPAR . BEGIN list(instruction) END [ WHILE TRUE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT FALSE END ]
## Transitions:
-- On BEGIN shift to state 83
## Reductions:

State 83:
## Known stack suffix:
## WHILE LPAR expression RPAR BEGIN
## LR(1) items:
instruction -> WHILE LPAR expression RPAR BEGIN . list(instruction) END [ WHILE TRUE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT FALSE END ]
## Transitions:
-- On WHILE shift to state 38
-- On TRUE shift to state 40
-- On THIS shift to state 41
-- On SUB shift to state 42
-- On RETURN shift to state 84
-- On PRINT shift to state 87
-- On NOT shift to state 43
-- On NEW shift to state 44
-- On LPAR shift to state 47
-- On INT shift to state 48
-- On IF shift to state 92
-- On IDENT shift to state 49
-- On FALSE shift to state 50
-- On uop shift to state 51
-- On mem shift to state 97
-- On list(instruction) shift to state 111
-- On instruction shift to state 107
-- On expression shift to state 109
## Reductions:
-- On END
--   reduce production list(instruction) ->

State 84:
## Known stack suffix:
## RETURN
## LR(1) items:
instruction -> RETURN . expression SEMI [ WHILE TRUE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT FALSE END ]
## Transitions:
-- On TRUE shift to state 40
-- On THIS shift to state 41
-- On SUB shift to state 42
-- On NOT shift to state 43
-- On NEW shift to state 44
-- On LPAR shift to state 47
-- On INT shift to state 48
-- On IDENT shift to state 49
-- On FALSE shift to state 50
-- On uop shift to state 51
-- On mem shift to state 52
-- On expression shift to state 85
## Reductions:

State 85:
## Known stack suffix:
## RETURN expression
## LR(1) items:
expression -> expression . bop expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . DOT IDENT LPAR list(expression) RPAR [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
instruction -> RETURN expression . SEMI [ WHILE TRUE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT FALSE END ]
mem -> expression . DOT IDENT [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
-- On SUB shift to state 54
-- On SEMI shift to state 86
-- On REM shift to state 55
-- On OR shift to state 56
-- On NEQ shift to state 57
-- On MUL shift to state 58
-- On LT shift to state 59
-- On LE shift to state 60
-- On GT shift to state 61
-- On GE shift to state 62
-- On EQ shift to state 63
-- On DOT shift to state 64
-- On DIV shift to state 71
-- On AND shift to state 72
-- On ADD shift to state 73
-- On bop shift to state 75
## Reductions:

State 86:
## Known stack suffix:
## RETURN expression SEMI
## LR(1) items:
instruction -> RETURN expression SEMI . [ WHILE TRUE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT FALSE END ]
## Transitions:
## Reductions:
-- On WHILE TRUE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT FALSE END
--   reduce production instruction -> RETURN expression SEMI

State 87:
## Known stack suffix:
## PRINT
## LR(1) items:
instruction -> PRINT . LPAR expression RPAR SEMI [ WHILE TRUE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT FALSE END ]
## Transitions:
-- On LPAR shift to state 88
## Reductions:

State 88:
## Known stack suffix:
## PRINT LPAR
## LR(1) items:
instruction -> PRINT LPAR . expression RPAR SEMI [ WHILE TRUE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT FALSE END ]
## Transitions:
-- On TRUE shift to state 40
-- On THIS shift to state 41
-- On SUB shift to state 42
-- On NOT shift to state 43
-- On NEW shift to state 44
-- On LPAR shift to state 47
-- On INT shift to state 48
-- On IDENT shift to state 49
-- On FALSE shift to state 50
-- On uop shift to state 51
-- On mem shift to state 52
-- On expression shift to state 89
## Reductions:

State 89:
## Known stack suffix:
## PRINT LPAR expression
## LR(1) items:
expression -> expression . bop expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . DOT IDENT LPAR list(expression) RPAR [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
instruction -> PRINT LPAR expression . RPAR SEMI [ WHILE TRUE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT FALSE END ]
mem -> expression . DOT IDENT [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
-- On SUB shift to state 54
-- On RPAR shift to state 90
-- On REM shift to state 55
-- On OR shift to state 56
-- On NEQ shift to state 57
-- On MUL shift to state 58
-- On LT shift to state 59
-- On LE shift to state 60
-- On GT shift to state 61
-- On GE shift to state 62
-- On EQ shift to state 63
-- On DOT shift to state 64
-- On DIV shift to state 71
-- On AND shift to state 72
-- On ADD shift to state 73
-- On bop shift to state 75
## Reductions:

State 90:
## Known stack suffix:
## PRINT LPAR expression RPAR
## LR(1) items:
instruction -> PRINT LPAR expression RPAR . SEMI [ WHILE TRUE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT FALSE END ]
## Transitions:
-- On SEMI shift to state 91
## Reductions:

State 91:
## Known stack suffix:
## PRINT LPAR expression RPAR SEMI
## LR(1) items:
instruction -> PRINT LPAR expression RPAR SEMI . [ WHILE TRUE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT FALSE END ]
## Transitions:
## Reductions:
-- On WHILE TRUE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT FALSE END
--   reduce production instruction -> PRINT LPAR expression RPAR SEMI

State 92:
## Known stack suffix:
## IF
## LR(1) items:
instruction -> IF . LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END [ WHILE TRUE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT FALSE END ]
## Transitions:
-- On LPAR shift to state 93
## Reductions:

State 93:
## Known stack suffix:
## IF LPAR
## LR(1) items:
instruction -> IF LPAR . expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END [ WHILE TRUE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT FALSE END ]
## Transitions:
-- On TRUE shift to state 40
-- On THIS shift to state 41
-- On SUB shift to state 42
-- On NOT shift to state 43
-- On NEW shift to state 44
-- On LPAR shift to state 47
-- On INT shift to state 48
-- On IDENT shift to state 49
-- On FALSE shift to state 50
-- On uop shift to state 51
-- On mem shift to state 52
-- On expression shift to state 94
## Reductions:

State 94:
## Known stack suffix:
## IF LPAR expression
## LR(1) items:
expression -> expression . bop expression [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . DOT IDENT LPAR list(expression) RPAR [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
instruction -> IF LPAR expression . RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END [ WHILE TRUE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT FALSE END ]
mem -> expression . DOT IDENT [ SUB RPAR REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
-- On SUB shift to state 54
-- On RPAR shift to state 95
-- On REM shift to state 55
-- On OR shift to state 56
-- On NEQ shift to state 57
-- On MUL shift to state 58
-- On LT shift to state 59
-- On LE shift to state 60
-- On GT shift to state 61
-- On GE shift to state 62
-- On EQ shift to state 63
-- On DOT shift to state 64
-- On DIV shift to state 71
-- On AND shift to state 72
-- On ADD shift to state 73
-- On bop shift to state 75
## Reductions:

State 95:
## Known stack suffix:
## IF LPAR expression RPAR
## LR(1) items:
instruction -> IF LPAR expression RPAR . BEGIN list(instruction) END ELSE BEGIN list(instruction) END [ WHILE TRUE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT FALSE END ]
## Transitions:
-- On BEGIN shift to state 96
## Reductions:

State 96:
## Known stack suffix:
## IF LPAR expression RPAR BEGIN
## LR(1) items:
instruction -> IF LPAR expression RPAR BEGIN . list(instruction) END ELSE BEGIN list(instruction) END [ WHILE TRUE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT FALSE END ]
## Transitions:
-- On WHILE shift to state 38
-- On TRUE shift to state 40
-- On THIS shift to state 41
-- On SUB shift to state 42
-- On RETURN shift to state 84
-- On PRINT shift to state 87
-- On NOT shift to state 43
-- On NEW shift to state 44
-- On LPAR shift to state 47
-- On INT shift to state 48
-- On IF shift to state 92
-- On IDENT shift to state 49
-- On FALSE shift to state 50
-- On uop shift to state 51
-- On mem shift to state 97
-- On list(instruction) shift to state 101
-- On instruction shift to state 107
-- On expression shift to state 109
## Reductions:
-- On END
--   reduce production list(instruction) ->

State 97:
## Known stack suffix:
## mem
## LR(1) items:
expression -> mem . [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
instruction -> mem . SET expression SEMI [ WHILE TRUE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT FALSE END ]
## Transitions:
-- On SET shift to state 98
## Reductions:
-- On SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD
--   reduce production expression -> mem

State 98:
## Known stack suffix:
## mem SET
## LR(1) items:
instruction -> mem SET . expression SEMI [ WHILE TRUE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT FALSE END ]
## Transitions:
-- On TRUE shift to state 40
-- On THIS shift to state 41
-- On SUB shift to state 42
-- On NOT shift to state 43
-- On NEW shift to state 44
-- On LPAR shift to state 47
-- On INT shift to state 48
-- On IDENT shift to state 49
-- On FALSE shift to state 50
-- On uop shift to state 51
-- On mem shift to state 52
-- On expression shift to state 99
## Reductions:

State 99:
## Known stack suffix:
## mem SET expression
## LR(1) items:
expression -> expression . bop expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . DOT IDENT LPAR list(expression) RPAR [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
instruction -> mem SET expression . SEMI [ WHILE TRUE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT FALSE END ]
mem -> expression . DOT IDENT [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
-- On SUB shift to state 54
-- On SEMI shift to state 100
-- On REM shift to state 55
-- On OR shift to state 56
-- On NEQ shift to state 57
-- On MUL shift to state 58
-- On LT shift to state 59
-- On LE shift to state 60
-- On GT shift to state 61
-- On GE shift to state 62
-- On EQ shift to state 63
-- On DOT shift to state 64
-- On DIV shift to state 71
-- On AND shift to state 72
-- On ADD shift to state 73
-- On bop shift to state 75
## Reductions:

State 100:
## Known stack suffix:
## mem SET expression SEMI
## LR(1) items:
instruction -> mem SET expression SEMI . [ WHILE TRUE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT FALSE END ]
## Transitions:
## Reductions:
-- On WHILE TRUE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT FALSE END
--   reduce production instruction -> mem SET expression SEMI

State 101:
## Known stack suffix:
## IF LPAR expression RPAR BEGIN list(instruction)
## LR(1) items:
instruction -> IF LPAR expression RPAR BEGIN list(instruction) . END ELSE BEGIN list(instruction) END [ WHILE TRUE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT FALSE END ]
## Transitions:
-- On END shift to state 102
## Reductions:

State 102:
## Known stack suffix:
## IF LPAR expression RPAR BEGIN list(instruction) END
## LR(1) items:
instruction -> IF LPAR expression RPAR BEGIN list(instruction) END . ELSE BEGIN list(instruction) END [ WHILE TRUE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT FALSE END ]
## Transitions:
-- On ELSE shift to state 103
## Reductions:

State 103:
## Known stack suffix:
## IF LPAR expression RPAR BEGIN list(instruction) END ELSE
## LR(1) items:
instruction -> IF LPAR expression RPAR BEGIN list(instruction) END ELSE . BEGIN list(instruction) END [ WHILE TRUE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT FALSE END ]
## Transitions:
-- On BEGIN shift to state 104
## Reductions:

State 104:
## Known stack suffix:
## IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN
## LR(1) items:
instruction -> IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN . list(instruction) END [ WHILE TRUE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT FALSE END ]
## Transitions:
-- On WHILE shift to state 38
-- On TRUE shift to state 40
-- On THIS shift to state 41
-- On SUB shift to state 42
-- On RETURN shift to state 84
-- On PRINT shift to state 87
-- On NOT shift to state 43
-- On NEW shift to state 44
-- On LPAR shift to state 47
-- On INT shift to state 48
-- On IF shift to state 92
-- On IDENT shift to state 49
-- On FALSE shift to state 50
-- On uop shift to state 51
-- On mem shift to state 97
-- On list(instruction) shift to state 105
-- On instruction shift to state 107
-- On expression shift to state 109
## Reductions:
-- On END
--   reduce production list(instruction) ->

State 105:
## Known stack suffix:
## IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction)
## LR(1) items:
instruction -> IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) . END [ WHILE TRUE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT FALSE END ]
## Transitions:
-- On END shift to state 106
## Reductions:

State 106:
## Known stack suffix:
## IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END
## LR(1) items:
instruction -> IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END . [ WHILE TRUE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT FALSE END ]
## Transitions:
## Reductions:
-- On WHILE TRUE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT FALSE END
--   reduce production instruction -> IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END

State 107:
## Known stack suffix:
## instruction
## LR(1) items:
list(instruction) -> instruction . list(instruction) [ END ]
## Transitions:
-- On WHILE shift to state 38
-- On TRUE shift to state 40
-- On THIS shift to state 41
-- On SUB shift to state 42
-- On RETURN shift to state 84
-- On PRINT shift to state 87
-- On NOT shift to state 43
-- On NEW shift to state 44
-- On LPAR shift to state 47
-- On INT shift to state 48
-- On IF shift to state 92
-- On IDENT shift to state 49
-- On FALSE shift to state 50
-- On uop shift to state 51
-- On mem shift to state 97
-- On list(instruction) shift to state 108
-- On instruction shift to state 107
-- On expression shift to state 109
## Reductions:
-- On END
--   reduce production list(instruction) ->

State 108:
## Known stack suffix:
## instruction list(instruction)
## LR(1) items:
list(instruction) -> instruction list(instruction) . [ END ]
## Transitions:
## Reductions:
-- On END
--   reduce production list(instruction) -> instruction list(instruction)

State 109:
## Known stack suffix:
## expression
## LR(1) items:
expression -> expression . bop expression [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
expression -> expression . DOT IDENT LPAR list(expression) RPAR [ SUB SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
instruction -> expression . SEMI [ WHILE TRUE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT FALSE END ]
mem -> expression . DOT IDENT [ SUB SET SEMI REM OR NEQ MUL LT LE GT GE EQ DOT DIV AND ADD ]
## Transitions:
-- On SUB shift to state 54
-- On SEMI shift to state 110
-- On REM shift to state 55
-- On OR shift to state 56
-- On NEQ shift to state 57
-- On MUL shift to state 58
-- On LT shift to state 59
-- On LE shift to state 60
-- On GT shift to state 61
-- On GE shift to state 62
-- On EQ shift to state 63
-- On DOT shift to state 64
-- On DIV shift to state 71
-- On AND shift to state 72
-- On ADD shift to state 73
-- On bop shift to state 75
## Reductions:

State 110:
## Known stack suffix:
## expression SEMI
## LR(1) items:
instruction -> expression SEMI . [ WHILE TRUE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT FALSE END ]
## Transitions:
## Reductions:
-- On WHILE TRUE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT FALSE END
--   reduce production instruction -> expression SEMI

State 111:
## Known stack suffix:
## WHILE LPAR expression RPAR BEGIN list(instruction)
## LR(1) items:
instruction -> WHILE LPAR expression RPAR BEGIN list(instruction) . END [ WHILE TRUE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT FALSE END ]
## Transitions:
-- On END shift to state 112
## Reductions:

State 112:
## Known stack suffix:
## WHILE LPAR expression RPAR BEGIN list(instruction) END
## LR(1) items:
instruction -> WHILE LPAR expression RPAR BEGIN list(instruction) END . [ WHILE TRUE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT FALSE END ]
## Transitions:
## Reductions:
-- On WHILE TRUE THIS SUB RETURN PRINT NOT NEW LPAR INT IF IDENT FALSE END
--   reduce production instruction -> WHILE LPAR expression RPAR BEGIN list(instruction) END

State 113:
## Known stack suffix:
## METHOD typp IDENT LPAR loption(separated_nonempty_list(COMMA,param_decl)) RPAR BEGIN list(var_decl) list(instruction)
## LR(1) items:
method_def -> METHOD typp IDENT LPAR loption(separated_nonempty_list(COMMA,param_decl)) RPAR BEGIN list(var_decl) list(instruction) . END [ METHOD END ]
## Transitions:
-- On END shift to state 114
## Reductions:

State 114:
## Known stack suffix:
## METHOD typp IDENT LPAR loption(separated_nonempty_list(COMMA,param_decl)) RPAR BEGIN list(var_decl) list(instruction) END
## LR(1) items:
method_def -> METHOD typp IDENT LPAR loption(separated_nonempty_list(COMMA,param_decl)) RPAR BEGIN list(var_decl) list(instruction) END . [ METHOD END ]
## Transitions:
## Reductions:
-- On METHOD END
--   reduce production method_def -> METHOD typp IDENT LPAR loption(separated_nonempty_list(COMMA,param_decl)) RPAR BEGIN list(var_decl) list(instruction) END

State 115:
## Known stack suffix:
## method_def
## LR(1) items:
list(method_def) -> method_def . list(method_def) [ END ]
## Transitions:
-- On METHOD shift to state 24
-- On method_def shift to state 115
-- On list(method_def) shift to state 116
## Reductions:
-- On END
--   reduce production list(method_def) ->

State 116:
## Known stack suffix:
## method_def list(method_def)
## LR(1) items:
list(method_def) -> method_def list(method_def) . [ END ]
## Transitions:
## Reductions:
-- On END
--   reduce production list(method_def) -> method_def list(method_def)

State 117:
## Known stack suffix:
## CLASS IDENT opt_parent BEGIN list(attr_decl) list(method_def)
## LR(1) items:
class_def -> CLASS IDENT opt_parent BEGIN list(attr_decl) list(method_def) . END [ MAIN CLASS ]
## Transitions:
-- On END shift to state 118
## Reductions:

State 118:
## Known stack suffix:
## CLASS IDENT opt_parent BEGIN list(attr_decl) list(method_def) END
## LR(1) items:
class_def -> CLASS IDENT opt_parent BEGIN list(attr_decl) list(method_def) END . [ MAIN CLASS ]
## Transitions:
## Reductions:
-- On MAIN CLASS
--   reduce production class_def -> CLASS IDENT opt_parent BEGIN list(attr_decl) list(method_def) END

State 119:
## Known stack suffix:
## attr_decl
## LR(1) items:
list(attr_decl) -> attr_decl . list(attr_decl) [ METHOD END ]
## Transitions:
-- On ATTR shift to state 19
-- On list(attr_decl) shift to state 120
-- On attr_decl shift to state 119
## Reductions:
-- On METHOD END
--   reduce production list(attr_decl) ->

State 120:
## Known stack suffix:
## attr_decl list(attr_decl)
## LR(1) items:
list(attr_decl) -> attr_decl list(attr_decl) . [ METHOD END ]
## Transitions:
## Reductions:
-- On METHOD END
--   reduce production list(attr_decl) -> attr_decl list(attr_decl)

State 121:
## Known stack suffix:
## list(var_decl) list(class_def)
## LR(1) items:
program -> list(var_decl) list(class_def) . MAIN BEGIN list(instruction) END EOF [ # ]
## Transitions:
-- On MAIN shift to state 122
## Reductions:

State 122:
## Known stack suffix:
## list(var_decl) list(class_def) MAIN
## LR(1) items:
program -> list(var_decl) list(class_def) MAIN . BEGIN list(instruction) END EOF [ # ]
## Transitions:
-- On BEGIN shift to state 123
## Reductions:

State 123:
## Known stack suffix:
## list(var_decl) list(class_def) MAIN BEGIN
## LR(1) items:
program -> list(var_decl) list(class_def) MAIN BEGIN . list(instruction) END EOF [ # ]
## Transitions:
-- On WHILE shift to state 38
-- On TRUE shift to state 40
-- On THIS shift to state 41
-- On SUB shift to state 42
-- On RETURN shift to state 84
-- On PRINT shift to state 87
-- On NOT shift to state 43
-- On NEW shift to state 44
-- On LPAR shift to state 47
-- On INT shift to state 48
-- On IF shift to state 92
-- On IDENT shift to state 49
-- On FALSE shift to state 50
-- On uop shift to state 51
-- On mem shift to state 97
-- On list(instruction) shift to state 124
-- On instruction shift to state 107
-- On expression shift to state 109
## Reductions:
-- On END
--   reduce production list(instruction) ->

State 124:
## Known stack suffix:
## list(var_decl) list(class_def) MAIN BEGIN list(instruction)
## LR(1) items:
program -> list(var_decl) list(class_def) MAIN BEGIN list(instruction) . END EOF [ # ]
## Transitions:
-- On END shift to state 125
## Reductions:

State 125:
## Known stack suffix:
## list(var_decl) list(class_def) MAIN BEGIN list(instruction) END
## LR(1) items:
program -> list(var_decl) list(class_def) MAIN BEGIN list(instruction) END . EOF [ # ]
## Transitions:
-- On EOF shift to state 126
## Reductions:

State 126:
## Known stack suffix:
## list(var_decl) list(class_def) MAIN BEGIN list(instruction) END EOF
## LR(1) items:
program -> list(var_decl) list(class_def) MAIN BEGIN list(instruction) END EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production program -> list(var_decl) list(class_def) MAIN BEGIN list(instruction) END EOF

State 127:
## Known stack suffix:
## class_def
## LR(1) items:
list(class_def) -> class_def . list(class_def) [ MAIN ]
## Transitions:
-- On CLASS shift to state 13
-- On list(class_def) shift to state 128
-- On class_def shift to state 127
## Reductions:
-- On MAIN
--   reduce production list(class_def) ->

State 128:
## Known stack suffix:
## class_def list(class_def)
## LR(1) items:
list(class_def) -> class_def list(class_def) . [ MAIN ]
## Transitions:
## Reductions:
-- On MAIN
--   reduce production list(class_def) -> class_def list(class_def)

